{
	"info": {
		"_postman_id": "1c324932-8cdb-416d-9e28-8c1fba312a09",
		"name": "Api Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40403746"
	},
	"item": [
		{
			"name": "Test adding new employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"adding Employee is successful\",function () {",
							"    pm.response.to.have.status(201);",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property(\"firstName\")",
							"    pm.expect(responseData).to.have.property(\"surname\")",
							"    pm.expect(responseData).to.have.property(\"seniority\")",
							"}) ",
							"pm.test(\"returned contents are correct\",function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.firstName).to.equal(\"Dan\")",
							"    pm.expect(responseData.surname).to.equal(\"Meyer\")",
							"    pm.expect(responseData.seniority).to.equal(\"Senior\")",
							"    ",
							"}) "
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"FirstName\": \"Dan\",\n    \"Surname\": \"Meyer\",\n    \"Seniority\": \"Senior\"\n}\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{EmployeesPath}}",
					"host": [
						"{{EmployeesPath}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "adding additional employees2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"FirstName\": \"Bob\",\n    \"Surname\": \"Bobb\",\n    \"Seniority\": \"Junior\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/employees",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "adding additional employees 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"adding Employee is successful\",function () {",
							"    pm.response.to.have.status(201);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"FirstName\": \"John\",\n    \"Surname\": \"Doe\",\n    \"Seniority\": \"Senior\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/employees",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "adding additional employees Copy 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"adding Employee is successful\",function () {",
							"    pm.response.to.have.status(201);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"FirstName\": \"Jim\",\n    \"Surname\": \"Tester\",\n    \"Seniority\": \"Senior\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/employees",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "adding additional employees Copy 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"adding Employee is successful\",function () {",
							"    pm.response.to.have.status(201);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"FirstName\": \"Andy\",\n    \"Surname\": \"Meyer\",\n    \"Seniority\": \"Senior\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/employees",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "adding additional employees Copy 6",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"adding Employee is successful\",function () {",
							"    pm.response.to.have.status(201);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"FirstName\": \"Danny\",\n    \"Surname\": \"Meyer\",\n    \"Seniority\": \"Junior\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/employees",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "test adding employee with incomplete parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"400 bad request error shown\",function () {",
							"    pm.response.to.have.status(400);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"FirstName\": \"Dan\",\n    \"Surname\": \"Meyer\"\n    \n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/employees",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "getAllEmployees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"getting Employees successful\",function () {",
							"    pm.response.to.have.status(200);",
							"   ",
							"}) ",
							"pm.test(\"each item contains correct column names\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.property(\"employeeID\");",
							"        pm.expect(item).to.have.property(\"firstName\");",
							"        pm.expect(item).to.have.property(\"surname\");",
							"        pm.expect(item).to.have.property(\"seniority\");",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{EmployeesPath}}",
					"host": [
						"{{EmployeesPath}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getEmployeebyID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"collumn names are correct\",function () {",
							"    pm.response.to.have.status(200);",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property(\"firstName\")",
							"    pm.expect(responseData).to.have.property(\"surname\")",
							"    pm.expect(responseData).to.have.property(\"seniority\")",
							"",
							"}) ",
							"pm.test(\"returned contents are correct\",function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.firstName).to.equal(\"Dan\")",
							"    pm.expect(responseData.surname).to.equal(\"Meyer\")",
							"    pm.expect(responseData.seniority).to.equal(\"Senior\")",
							"    ",
							"}) ",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/api/employees/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"employees",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "test getting a non-existant employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found error shown\",function () {",
							"    pm.response.to.have.status(404);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost/api/employees/1000000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"employees",
						"1000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateAnEmployee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"collumn names are correct\",function () {",
							"    pm.response.to.have.status(200);",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property(\"firstName\")",
							"    pm.expect(responseData).to.have.property(\"surname\")",
							"    pm.expect(responseData).to.have.property(\"seniority\")",
							"",
							"}) ",
							"pm.test(\"returned contents are correct\",function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.firstName).to.equal(\"Daniel\")",
							"    pm.expect(responseData.surname).to.equal(\"Meyer\")",
							"    pm.expect(responseData.seniority).to.equal(\"Senior\")",
							"    ",
							"}) ",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Daniel\",\n    \"surname\": \"Meyer\",\n    \"seniority\": \"Senior\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/employees/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"employees",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "test updating a non-existant employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found error shown\",function () {",
							"    pm.response.to.have.status(404);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Daniel\",\n    \"surname\": \"Meyer\",\n    \"seniority\": \"Senior\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/employees/1000000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"employees",
						"1000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "test deleting an employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"deleting employee successful\",function () {",
							"    pm.response.to.have.status(200); ",
							"    ",
							"}) ",
							"pm.test(\"check success message\", function(){",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.equal(\"deleted successfully\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost/api/employees/6",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"employees",
						"6"
					]
				}
			},
			"response": []
		},
		{
			"name": "test deleting a non existant driver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"employee not found\",function () {",
							"    pm.response.to.have.status(404); ",
							"    ",
							"}) ",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost/api/employees/6000000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"employees",
						"6000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new Driver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"adding Driver is successful\",function () {",
							"    pm.response.to.have.status(201);",
							"     const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property(\"employeeID\")",
							"    pm.expect(responseData).to.have.property(\"category\")",
							"    pm.expect(responseData).to.have.property(\"driverID\")",
							"",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"EmployeeID\": 1,\n  \"Category\": \"Local Delivery\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/drivers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"drivers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new Driver 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"EmployeeID\": 2,\n  \"Category\": \"Long distance shipments\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/drivers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"drivers"
					]
				}
			},
			"response": []
		},
		{
			"name": "test adding a driver to a non existant employeeID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"returns 404 as employee is not found\",function () {",
							"    pm.response.to.have.status(404);",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"EmployeeID\": 100000,\n  \"Category\": \"Local Delivery\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/drivers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"drivers"
					]
				}
			},
			"response": []
		},
		{
			"name": "test adding a driver with incomplete parameters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"returns 400 to indicate bad request\",function () {",
							"    pm.response.to.have.status(400);",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"EmployeeID\": 3\n  \n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/drivers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"drivers"
					]
				}
			},
			"response": []
		},
		{
			"name": "test getting all drivers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"getting Drivers successful\",function () {",
							"    pm.response.to.have.status(200);",
							"   ",
							"}) ",
							"pm.test(\"each item contains correct column names\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(item => {",
							"        pm.expect(item).to.have.property(\"driverID\");",
							"        pm.expect(item).to.have.property(\"category\");",
							"        ",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/drivers",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"drivers"
					]
				}
			},
			"response": []
		},
		{
			"name": "test getting a driver by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"collumn names are correct\",function () {",
							"    pm.response.to.have.status(200);",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property(\"driverID\")",
							"    pm.expect(responseData).to.have.property(\"category\")",
							"    ",
							"    ",
							"",
							"}) ",
							"pm.test(\"returned contents are correct\",function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.category).to.equal(\"Local Delivery\")",
							"   ",
							"    ",
							"    ",
							"}) ",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/drivers/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"drivers",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "test updating a driver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"collumn names are correct\",function () {",
							"    pm.response.to.have.status(200);",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.have.property(\"driverID\")",
							"    pm.expect(responseData).to.have.property(\"category\")",
							"        ",
							"    ",
							"",
							"}) ",
							"pm.test(\"returned contents are correct\",function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.category).to.equal(\"Long-distance bulk shipments\")",
							"    ",
							"    ",
							"    ",
							"}) ",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \n    \"category\": \"Long-distance bulk shipments\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/drivers/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"drivers",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "test updating a non-existant driver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 not found error shown\",function () {",
							"    pm.response.to.have.status(404);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Daniel\",\n    \"surname\": \"Meyer\",\n    \"seniority\": \"Senior\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost/api/drivers/1000000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"drivers",
						"1000000"
					]
				}
			},
			"response": []
		},
		{
			"name": "test deleting a driver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"deleting driver successful\",function () {",
							"    pm.response.to.have.status(200); ",
							"    ",
							"}) ",
							"pm.test(\"check success message\", function(){",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.equal(\"deleted successfully\");",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost/api/drivers/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"drivers",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "test deleting a non existant driver",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"expect 404 not found\",function () {",
							"    pm.response.to.have.status(404); ",
							"    ",
							"}) ",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost/api/drivers/2000",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"path": [
						"api",
						"drivers",
						"2000"
					]
				}
			},
			"response": []
		}
	]
}